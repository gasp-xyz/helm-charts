apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "node.name" . }}
  labels: {{- include "node.labels" . | nindent 4 }}
    service: {{ include "node.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "node.selectorLabels" . | nindent 6 }}
      service: {{ include "node.name" . }}
  serviceName: {{ include "node.name" . }}
  template:
    metadata:
      labels:
        {{- include "node.labels" . | nindent 8 }}
        service: {{ include "node.name" . }}
    spec:
      initContainers:
        - name: chainspec-generator
          image: {{ .Values.node.relaychain.image | quote }}
          command: ["/bin/bash"]
          args: 
            - -c
            - /usr/bin/polkadot build-spec --chain= {{ .Values.node.relaychain.chain }} --disable-default-bootnode --raw > /etc/mangata/relaychain-local.json
          volumeMounts:
            - mountPath: /etc/mangata/
              name: node-chainspec-volume
        - name: export-genesis-wasm-and-state
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/bash"]
          args: 
            - -c
            - |
              set -eu
              /mangata/node export-genesis-state --chain={{ .Values.node.chain }} > /etc/mangata/genesis-state
              /mangata/node export-genesis-wasm --chain={{ .Values.node.chain }} > /etc/mangata/genesis-wasm
          volumeMounts:
            - mountPath: /etc/mangata/
              name: node-chainspec-volume
        - name: inject-keys
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/bash"]
          args:
            - -c
            - |
              set -eu
              {{- range $keys := .Values.node.accountKeys }}
              if [ ! -f /var/run/secrets/{{ .type }}/type ]; then
                 echo "Error: File /var/run/secrets/{{ .type }}/type does not exist"
                 exit 1
              fi
              /mangata/node key insert --chain public-testnet --keystore-path /keystore \
              --key-type $(cat /var/run/secrets/{{ .type }}/type) \
              --scheme $(cat /var/run/secrets/{{ .type }}/scheme) \
              --suri /var/run/secrets/{{ .type }}/seed \
              && echo "Inserted key {{ .type }} into Keystore" \
              || echo "Failed to insert key {{ .type}} into Keystore."
              {{- end }}
          volumeMounts:
            - mountPath: /keystore
              name: chain-keystore
          {{- range $keys := .Values.node.accountKeys }}
            - mountPath: /var/run/secrets/{{ .type }}
              name: {{ .type }}
          {{- end }}
      containers:
        - name: node
          image: "{{ .Values.image.repository}}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          command:
            # parachain
            - /mangata/node
            - --name={{ include "node.name" . }}
            - --chain={{ .Values.node.chain }}
            - --base-path=/mangata/data
            - --keystore-path=/keystore
            - --collator
            - --force-authoring
            - --port=30333
            - --ws-port=9944
            - --rpc-port=9933
            - --prometheus-port=9716
            - --unsafe-ws-external
            - --unsafe-rpc-external
            - --prometheus-external
            - --rpc-methods=Unsafe
            - --rpc-cors=all
            - --node-key={{ .Values.node.nodeKey }}
            {{- if .Values.remoteCluster }}
            - --public-addr=/dns4/{{ include "node.name" . }}-{{ .Values.env }}.{{ .Values.domainZone }}/tcp/30333
            {{- end }}            
            {{- if .Values.node.bootnodeAddr }}
            - --bootnodes=/dns4/node-01/tcp/30333/p2p/12D3KooWSCufgHzV4fCwRijfH2k3abrpAJxTKxEvN1FDuRXA2U9x
            {{- end }}
            - --
            # relaychain
            - --base-path=/mangata/relaychaindata
            - --bootnodes={{ .Values.node.relaychain.bootnode }}
            - --execution=wasm
            - --chain=/etc/mangata/relaychain-local.json
          ports:
            - containerPort: 9716
            - containerPort: 9944
            - containerPort: 30333
            - containerPort: 40333
          env:
            {{- range $key, $val := .Values.node.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/mangata/
              name: node-chainspec-volume
            - mountPath: /keystore
              name: chain-keystore
            - mountPath: /mangata/data
              name: chaindata            
            - mountPath: /mangata/relaychaindata
              name: relaychaindata
        {{- if .Values.node.parachainRegisterSidecar.enable }}
        - name: parachain-register-sidecar
          image: mangatasolutions/parachain-register:1.0
          command:
            - bash
            - -c
            - node index.js
          env:
            - name: STATE_FILE
              value: /etc/mangata/genesis-state
            - name: WASM_FILE
              value: /etc/mangata/genesis-wasm
            - name: COLLATOR_ADDR
              value: {{ .Values.node.parachainRegisterSidecar.relaychainHostAddr | quote }}
            - name: PARA_ID
              value:  {{ .Values.node.parachainRegisterSidecar.parachainId }}
          volumeMounts:
            - mountPath: /etc/mangata/
              name: node-chainspec-volume
        {{- end }}
      volumes:
        - name: node-chainspec-volume
          emptyDir: {}
        - name: chain-keystore
          emptyDir:
            medium: "Memory"
            sizeLimit: 10Mi
      {{- range $keys := .Values.node.accountKeys }}
        - name: {{ .type }}
          secret:
            secretName: {{ include "node.name" . }}-{{ .type }}
            defaultMode: 0400
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: chaindata
      spec:
        storageClassName: "standard-rwo"
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.node.storageSize }}
    - metadata:
        name: relaychaindata
      spec:
        storageClassName: "standard-rwo"
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.node.relaychain.storageSize }}
